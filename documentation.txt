==========================================================================================
LSLDC COLO REQUEST APP DOCUMENTATION UPDATED 8/17/17 DEVELOPED BY ANDREW CHALFANT - CHALFANT@UMASS.EDU - ANDREWLCHALFANT@GMAIL.COM

CURRENTLY RUNNING:
Python 3.4.2
Apache 2.4.10
mod_wsgi 4.3.0


CURRENT ISSUES:
Downloading Excel Spreadsheet Data via the COLO portal will not work in Firefox
Submitting invalid email addresses in any of the sites forms will result in a 500 Error
==========================================================================================

1. BASIC:
The files used in the LSLDC COLO Request App Site can be found on dj-1.www.umass.edu in the directory /var/www/html/COLOSite. 

This folder contains most noticeably:
‘colo_env’ - a folder holding the Django virtual environment settings
‘COLOSite’ - a folder holding the settings for the whole site, in which the requestApp lives
‘requestApp’ - a folder holding the app settings 

2. TEMPLATES:
Individual pages are served by ‘requestApp/views.py’ which provides Django functionality and serves the CSS templates found in ‘requestApp/static’ and HTML templates found in ‘requestApp/templates’. In total, there are four error templates, six page templates, and six email templates.

Email templates are converted directly to text, so no HTML formatting can be included in their make up.
Error templates are displayed by Django automatically when an error occurs. Their files live outside of the ‘requestApp’ templates. 
Page templates utilize CSS and Javascript files found in the ‘requestApp/static’ folder.

3. MODELS:
Requester data is stored as a ‘colo user’ model. Except for the ‘man_approved’ field, which is marked to ‘True’ when their manager confirms their request, ‘COLO_approved’ field which is marked to ‘True’ when a Data Center Ops Manager confirms their request, ‘time’ which is filled with the date of their request, and ‘tracker’ which uses the UUID system to generate a unique tracking number, the ‘colo user’ model is generated by the input received on the home page of the site.

4. FORMS:
All input is received through the Django ‘forms.py’ file. The Request App uses 3 different forms, listed below.

‘COLOApprovalForm’ - takes an argument of a 36 digit tracking number
‘COLODeletionForm’ - takes an argument of a 36 digit tracking number
‘PostForm’ - has 8 editable fields that are initialized by a requester’s data

PostForm has a variety of custom validators which ensure input will be valid. These validators can be edited, for example to add more allowable email addresses, in the clean method of the PostForm class in ‘forms.py’
==========================================================================================

5. VIEWS:
There are 6 different views, located in ‘requestApp/views.py’, which house the functionality of the site. The URL mappings of these views can be found in the ‘requestApp/urls.py’ file.

‘home’ -  Home page which houses the PostForm, sends an email receipt to the requester, and creates a confirmation site for the requester’s manager and notifies them by email.
‘complete’ - a simple view which displays the ‘employee_complete.html’ template
‘manager’ - page only accessible via email link sent to the requester’s manager (URL is composed of a unique token and the request tracking number). View will change the ‘man_approved’ field of the request to TRUE or delete the request from the database, depending on if the manager clicks the ‘Approve’ or ‘Deny’ button. Approving request will send a receipt email to the manager and a ‘New Request’ email to LSLDC Ops.
‘manager_complete’ - a simple view which displays the ‘manager_complete.html’ template
‘manager_denied’ - a simple view which displays the ‘manager_denied.html’ template
‘COLO’ - This site is only accessible by LSLDC COLO Ops Staff and serves as the admin site for requests. view changes the ‘COLO_approved” field of a ‘colo user’ model to TRUE or deletes the model from the database, depending on if the ‘Approve’ or ‘Deny’ button is clicked. Approving a request will send a notification email to the requester as well as Mark Harrison to enter the request data in CCURE. This view also creates two lists for models with their ‘COLO_approved’ field marked as TRUE and for those in which it is false. These lists are used to generate the counters displaying how many pending/approved requests there are.

6. ADMIN SETTINGS:
The Django admin site can be accessed by attaching ‘/admin/ to the end of the site’s home. The Admin site can be useful for handling large numbers of requests, changing accidental errors in user input, and exporting data to Excel spreadsheets. For full access inside the Admin site, users should be registered under the ‘UMass Amherst IT Administrators’ group.

==========================================================================================
